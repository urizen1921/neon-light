{"ast":null,"code":"import cookie from 'js-cookie';\nimport { GoogleLogout } from 'react-google-login'; //Set in Cookie\n\nexport const setCookie = (key, value) => {\n  if (window !== 'undefined') {\n    cookie.set(key, value, {\n      // 1Day\n      expires: 1\n    });\n  }\n}; //Remove from cookie\n\nexport const removeCookie = key => {\n  if (window !== 'undefined') {\n    cookie.remove(key, {\n      expires: 1\n    });\n  }\n}; // Get from cookie such as stored token\n// Will be useful when we need to make request to server with token\n\nexport const getCookie = key => {\n  if (window !== 'undefined') {\n    return cookie.get(key);\n  }\n}; //Set in localstorage\n\nexport const setLocalStorage = (key, value) => {\n  if (window !== 'undefined') {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n}; //Remove from localStorage\n\nexport const removeLocalStorage = key => {\n  if (window !== 'undefined') {\n    localStorage.removeItem(key);\n  }\n}; //Auth user after login\n\nexport const authenticate = (response, next) => {\n  setCookie('token', response.data.token);\n  setLocalStorage('user', response.data.user);\n  next();\n}; //Signout\n\nexport const signout = next => {\n  removeCookie('token');\n  removeLocalStorage('user');\n  next();\n}; //Get user info from localstorage\n\nexport const isAuth = () => {\n  if (window !== 'undefined') {\n    const cookieChecked = getCookie('token');\n\n    if (cookieChecked) {\n      if (localStorage.getItem('user')) {\n        return JSON.parse(localStorage.getItem('user'));\n      } else {\n        return false;\n      }\n    }\n  }\n}; //update user data in localStorage\n\nexport const updateUser = (response, next) => {\n  if (window !== 'undefined') {\n    let auth = JSON.parse(localStorage.getItem('user'));\n    auth = response.data;\n    localStorage.setItem('user', JSON.stringify(auth));\n  }\n\n  next();\n};","map":{"version":3,"sources":["/home/urizen1921/Documents/gitHubProjects/neon-lights/neon/client/src/helpers/auth.js"],"names":["cookie","GoogleLogout","setCookie","key","value","window","set","expires","removeCookie","remove","getCookie","get","setLocalStorage","localStorage","setItem","JSON","stringify","removeLocalStorage","removeItem","authenticate","response","next","data","token","user","signout","isAuth","cookieChecked","getItem","parse","updateUser","auth"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,SAASC,YAAT,QAA6B,oBAA7B,C,CAEA;;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACvC,MAAGC,MAAM,KAAK,WAAd,EAA2B;AACzBL,IAAAA,MAAM,CAACM,GAAP,CAAWH,GAAX,EAAgBC,KAAhB,EAAuB;AACrB;AACAG,MAAAA,OAAO,EAAE;AAFY,KAAvB;AAID;AACF,CAPM,C,CASP;;AACA,OAAO,MAAMC,YAAY,GAAIL,GAAD,IAAS;AACnC,MAAGE,MAAM,KAAK,WAAd,EAA2B;AACzBL,IAAAA,MAAM,CAACS,MAAP,CAAcN,GAAd,EAAmB;AACjBI,MAAAA,OAAO,EAAE;AADQ,KAAnB;AAGD;AACF,CANM,C,CAQP;AACA;;AACA,OAAO,MAAMG,SAAS,GAAIP,GAAD,IAAS;AAChC,MAAGE,MAAM,KAAK,WAAd,EAA2B;AACzB,WAAOL,MAAM,CAACW,GAAP,CAAWR,GAAX,CAAP;AACD;AACF,CAJM,C,CAOP;;AACA,OAAO,MAAMS,eAAe,GAAG,CAACT,GAAD,EAAMC,KAAN,KAAgB;AAC7C,MAAGC,MAAM,KAAK,WAAd,EAA2B;AACzBQ,IAAAA,YAAY,CAACC,OAAb,CAAqBX,GAArB,EAA0BY,IAAI,CAACC,SAAL,CAAeZ,KAAf,CAA1B;AACD;AACF,CAJM,C,CAMP;;AACA,OAAO,MAAMa,kBAAkB,GAAId,GAAD,IAAS;AACzC,MAAGE,MAAM,KAAK,WAAd,EAA2B;AACzBQ,IAAAA,YAAY,CAACK,UAAb,CAAwBf,GAAxB;AACD;AACF,CAJM,C,CAMP;;AACA,OAAO,MAAMgB,YAAY,GAAG,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC9CnB,EAAAA,SAAS,CAAC,OAAD,EAAUkB,QAAQ,CAACE,IAAT,CAAcC,KAAxB,CAAT;AACAX,EAAAA,eAAe,CAAC,MAAD,EAASQ,QAAQ,CAACE,IAAT,CAAcE,IAAvB,CAAf;AACAH,EAAAA,IAAI;AACL,CAJM,C,CAMP;;AACA,OAAO,MAAMI,OAAO,GAAIJ,IAAD,IAAU;AAC/Bb,EAAAA,YAAY,CAAC,OAAD,CAAZ;AACAS,EAAAA,kBAAkB,CAAC,MAAD,CAAlB;AACAI,EAAAA,IAAI;AACL,CAJM,C,CAMP;;AACA,OAAO,MAAMK,MAAM,GAAG,MAAM;AAC1B,MAAGrB,MAAM,KAAK,WAAd,EAA2B;AACzB,UAAMsB,aAAa,GAAGjB,SAAS,CAAC,OAAD,CAA/B;;AACA,QAAGiB,aAAH,EAAkB;AAChB,UAAGd,YAAY,CAACe,OAAb,CAAqB,MAArB,CAAH,EAAiC;AAC/B,eAAOb,IAAI,CAACc,KAAL,CAAWhB,YAAY,CAACe,OAAb,CAAqB,MAArB,CAAX,CAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF;AACF;AACF,CAXM,C,CAaP;;AACA,OAAO,MAAME,UAAU,GAAG,CAACV,QAAD,EAAWC,IAAX,KAAoB;AAC5C,MAAGhB,MAAM,KAAK,WAAd,EAA2B;AACzB,QAAI0B,IAAI,GAAGhB,IAAI,CAACc,KAAL,CAAWhB,YAAY,CAACe,OAAb,CAAqB,MAArB,CAAX,CAAX;AACAG,IAAAA,IAAI,GAAGX,QAAQ,CAACE,IAAhB;AACAT,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAee,IAAf,CAA7B;AACD;;AACDV,EAAAA,IAAI;AACL,CAPM","sourcesContent":["import cookie from 'js-cookie';\nimport { GoogleLogout } from 'react-google-login';\n\n//Set in Cookie\n\nexport const setCookie = (key, value) => {\n  if(window !== 'undefined') {\n    cookie.set(key, value, {\n      // 1Day\n      expires: 1\n    });\n  }\n};\n\n//Remove from cookie\nexport const removeCookie = (key) => {\n  if(window !== 'undefined') {\n    cookie.remove(key, {\n      expires: 1\n    });\n  }\n};\n\n// Get from cookie such as stored token\n// Will be useful when we need to make request to server with token\nexport const getCookie = (key) => {\n  if(window !== 'undefined') {\n    return cookie.get(key);\n  }\n};\n\n\n//Set in localstorage\nexport const setLocalStorage = (key, value) => {\n  if(window !== 'undefined') {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n};\n\n//Remove from localStorage\nexport const removeLocalStorage = (key) => {\n  if(window !== 'undefined') {\n    localStorage.removeItem(key);\n  }\n};\n\n//Auth user after login\nexport const authenticate = (response, next) => {\n  setCookie('token', response.data.token);\n  setLocalStorage('user', response.data.user);\n  next();\n};\n\n//Signout\nexport const signout = (next) => {\n  removeCookie('token');\n  removeLocalStorage('user');\n  next();\n};\n\n//Get user info from localstorage\nexport const isAuth = () => {\n  if(window !== 'undefined') {\n    const cookieChecked = getCookie('token');\n    if(cookieChecked) {\n      if(localStorage.getItem('user')) {\n        return JSON.parse(localStorage.getItem('user'));\n      } else {\n        return false;\n      }\n    }\n  }\n};\n\n//update user data in localStorage\nexport const updateUser = (response, next) => {\n  if(window !== 'undefined') {\n    let auth = JSON.parse(localStorage.getItem('user'));\n    auth = response.data;\n    localStorage.setItem('user', JSON.stringify(auth));\n  }\n  next();\n};\n\n"]},"metadata":{},"sourceType":"module"}